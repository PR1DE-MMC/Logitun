// <auto-generated />
using System;
using Logitun.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Logitun.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250520100757_InitialDbMigration")]
    partial class InitialDbMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Logitun.Core.Entities.Credentials", b =>
                {
                    b.Property<int>("CredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("credential_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CredentialId"));

                    b.Property<bool>("Activated")
                        .HasColumnType("boolean")
                        .HasColumnName("activated");

                    b.Property<string>("ActivationKey")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("activation_key");

                    b.Property<string>("LangKey")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("lang_key");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("ResetDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reset_date");

                    b.Property<string>("ResetKey")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("reset_key");

                    b.HasKey("CredentialId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("auth_credentials");
                });

            modelBuilder.Entity("Logitun.Core.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("location_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("LocationId");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("Logitun.Core.Entities.Mission", b =>
                {
                    b.Property<int>("MissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mission_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MissionId"));

                    b.Property<int?>("DestinationLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("destination_location_id");

                    b.Property<decimal?>("DistanceKm")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("distance_km");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<DateTime?>("EndDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_datetime");

                    b.Property<int?>("OriginLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("origin_location_id");

                    b.Property<decimal?>("PayloadWeight")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("payload_weight");

                    b.Property<DateTime>("StartDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int?>("TruckId")
                        .HasColumnType("integer")
                        .HasColumnName("truck_id");

                    b.HasKey("MissionId");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("DriverId");

                    b.HasIndex("OriginLocationId");

                    b.HasIndex("TruckId");

                    b.ToTable("missions");
                });

            modelBuilder.Entity("Logitun.Core.Entities.PersonalInformation", b =>
                {
                    b.Property<int>("InformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("information_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InformationId"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthdate");

                    b.Property<string>("Cin")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cin");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("phone_number");

                    b.HasKey("InformationId");

                    b.HasIndex("Cin")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("auth_information");
                });

            modelBuilder.Entity("Logitun.Core.Entities.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("name");

                    b.HasKey("Name");

                    b.ToTable("auth_role");
                });

            modelBuilder.Entity("Logitun.Core.Entities.TimeOffRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("request_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequestId"));

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("RequestId");

                    b.HasIndex("DriverId");

                    b.ToTable("time_off_requests");
                });

            modelBuilder.Entity("Logitun.Core.Entities.Truck", b =>
                {
                    b.Property<int>("TruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("truck_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TruckId"));

                    b.Property<decimal?>("CapacityKg")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("capacity_kg");

                    b.Property<string>("FuelType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("fuel_type");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_maintenance_date");

                    b.Property<int?>("ManufactureYear")
                        .HasColumnType("integer")
                        .HasColumnName("manufacture_year");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("model");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("plate_number");

                    b.HasKey("TruckId");

                    b.ToTable("trucks");
                });

            modelBuilder.Entity("Logitun.Core.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("CredentialsId")
                        .HasColumnType("integer")
                        .HasColumnName("credentials_id");

                    b.Property<int>("InformationId")
                        .HasColumnType("integer")
                        .HasColumnName("information_id");

                    b.HasKey("UserId");

                    b.HasIndex("CredentialsId")
                        .IsUnique();

                    b.HasIndex("InformationId")
                        .IsUnique();

                    b.ToTable("auth_user");
                });

            modelBuilder.Entity("auth_user_role", b =>
                {
                    b.Property<int>("credential_id")
                        .HasColumnType("integer");

                    b.Property<string>("role_name")
                        .HasColumnType("character varying(36)");

                    b.HasKey("credential_id", "role_name");

                    b.HasIndex("role_name");

                    b.ToTable("auth_credentials_role", (string)null);
                });

            modelBuilder.Entity("Logitun.Core.Entities.Mission", b =>
                {
                    b.HasOne("Logitun.Core.Entities.Location", "DestinationLocation")
                        .WithMany("DestinationMissions")
                        .HasForeignKey("DestinationLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logitun.Core.Entities.User", "Driver")
                        .WithMany("Missions")
                        .HasForeignKey("DriverId");

                    b.HasOne("Logitun.Core.Entities.Location", "OriginLocation")
                        .WithMany("OriginMissions")
                        .HasForeignKey("OriginLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logitun.Core.Entities.Truck", "Truck")
                        .WithMany("Missions")
                        .HasForeignKey("TruckId");

                    b.Navigation("DestinationLocation");

                    b.Navigation("Driver");

                    b.Navigation("OriginLocation");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("Logitun.Core.Entities.TimeOffRequest", b =>
                {
                    b.HasOne("Logitun.Core.Entities.User", "Driver")
                        .WithMany("TimeOffRequests")
                        .HasForeignKey("DriverId");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Logitun.Core.Entities.User", b =>
                {
                    b.HasOne("Logitun.Core.Entities.Credentials", "Credentials")
                        .WithOne("User")
                        .HasForeignKey("Logitun.Core.Entities.User", "CredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logitun.Core.Entities.PersonalInformation", "Information")
                        .WithOne("User")
                        .HasForeignKey("Logitun.Core.Entities.User", "InformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credentials");

                    b.Navigation("Information");
                });

            modelBuilder.Entity("auth_user_role", b =>
                {
                    b.HasOne("Logitun.Core.Entities.Credentials", null)
                        .WithMany()
                        .HasForeignKey("credential_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_auth_credentials_role_auth_credentials");

                    b.HasOne("Logitun.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("role_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_auth_credentials_role_auth_role");
                });

            modelBuilder.Entity("Logitun.Core.Entities.Credentials", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Logitun.Core.Entities.Location", b =>
                {
                    b.Navigation("DestinationMissions");

                    b.Navigation("OriginMissions");
                });

            modelBuilder.Entity("Logitun.Core.Entities.PersonalInformation", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Logitun.Core.Entities.Truck", b =>
                {
                    b.Navigation("Missions");
                });

            modelBuilder.Entity("Logitun.Core.Entities.User", b =>
                {
                    b.Navigation("Missions");

                    b.Navigation("TimeOffRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
